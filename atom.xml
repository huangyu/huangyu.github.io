<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随记随想</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangyu.github.io/"/>
  <updated>2018-10-17T07:30:22.968Z</updated>
  <id>https://huangyu.github.io/</id>
  
  <author>
    <name>huangyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP三次握手与四次挥手</title>
    <link href="https://huangyu.github.io/archives/14e70aec.html"/>
    <id>https://huangyu.github.io/archives/14e70aec.html</id>
    <published>2018-10-17T07:08:56.000Z</published>
    <updated>2018-10-17T07:30:22.968Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;p&gt;TCP，提供面向连接的服务，在传送数据之前必须先建立连接，数据传送完成后要释放连接。因此TCP是一种可靠的的运输服务，&lt;/p&gt;&lt;h1
        
      
    
    </summary>
    
      <category term="网络" scheme="https://huangyu.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP" scheme="https://huangyu.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>编码、加密、Hash、序列化</title>
    <link href="https://huangyu.github.io/archives/386e4652.html"/>
    <id>https://huangyu.github.io/archives/386e4652.html</id>
    <published>2018-10-16T07:28:18.000Z</published>
    <updated>2018-10-16T07:28:18.543Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;密码学&quot;&gt;&lt;a href=&quot;#密码学&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="基础知识" scheme="https://huangyu.github.io/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="密码学、Hash、编码" scheme="https://huangyu.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6%E3%80%81Hash%E3%80%81%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>HTTP知识</title>
    <link href="https://huangyu.github.io/archives/d27d50fd.html"/>
    <id>https://huangyu.github.io/archives/d27d50fd.html</id>
    <published>2018-10-16T07:28:12.000Z</published>
    <updated>2018-10-17T07:30:11.421Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;HTTP定义&quot;&gt;&lt;a href=&quot;#HTTP定义&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="网络" scheme="https://huangyu.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HenCoder" scheme="https://huangyu.github.io/tags/HenCoder/"/>
    
      <category term="HTTP" scheme="https://huangyu.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>kotlin设计模式</title>
    <link href="https://huangyu.github.io/archives/5ff9cb15.html"/>
    <id>https://huangyu.github.io/archives/5ff9cb15.html</id>
    <published>2018-09-29T03:29:39.000Z</published>
    <updated>2018-09-29T03:29:39.353Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;p&gt;kotlin设计模式&lt;/p&gt;&lt;h1 id=&quot;简单工厂&quot;&gt;&lt;a href=&quot;#简单工厂&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="kotlin" scheme="https://huangyu.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="https://huangyu.github.io/tags/kotlin/"/>
    
      <category term="设计模式" scheme="https://huangyu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git-flow分支策略</title>
    <link href="https://huangyu.github.io/archives/eeda3694.html"/>
    <id>https://huangyu.github.io/archives/eeda3694.html</id>
    <published>2018-09-20T13:32:53.000Z</published>
    <updated>2018-09-21T01:10:55.501Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;p&gt;git-flow分支管理策略是非常流行的，实际项目的版本管理中可以借鉴其思想。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nvie.com/posts/a-successful-git-branching-model/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;git-flow将分支分为以下几种类型：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align:center&quot;&gt;类型&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;来源&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;去向&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;master&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;主分支&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;release&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;develop&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;develop和master&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;预发布分支&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;develop&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;release和master&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;开发分支&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;feature&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;develop&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;develop&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;功能分支&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;hotfix&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;master&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;develop和master&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;紧急修复分支&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="git" scheme="https://huangyu.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://huangyu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Picasso源码分析</title>
    <link href="https://huangyu.github.io/archives/38a31505.html"/>
    <id>https://huangyu.github.io/archives/38a31505.html</id>
    <published>2018-09-13T07:37:58.000Z</published>
    <updated>2018-09-18T09:05:42.802Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;Picasso介绍&quot;&gt;&lt;a href=&quot;#Picasso介绍&quot; class=&quot;headerlink&quot; title=&quot;Picasso介绍&quot;&gt;&lt;/a&gt;Picasso介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/square/picasso&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/square/picasso&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Picasso是Android开发中常用的几大图片加载库之一，除此之外常用的还有UIL、Glide、Fresco等。&lt;br&gt;目前UIL作者已经不再维护，Glide源码比较复杂，Fresco涉及c语言层面。相比之下Picasso写得比较简洁、规范，更好入手分析。&lt;/p&gt;&lt;p&gt;通过分析Picasso源码来对Android的图片加载有更深入的理解。&lt;/p&gt;&lt;p&gt;目前最新版本为2.71828（奇葩的版本号），本文基于此分析。&lt;/p&gt;&lt;p&gt;最新的使用方式为：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PicassoProvider.get().load(&amp;quot;url&amp;quot;).into(imageview)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面就根据这个调用流程来分析其源码。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://huangyu.github.io/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://huangyu.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android P使用私有API弹出warning</title>
    <link href="https://huangyu.github.io/archives/35fd3a81.html"/>
    <id>https://huangyu.github.io/archives/35fd3a81.html</id>
    <published>2018-09-12T03:17:29.000Z</published>
    <updated>2018-09-12T06:05:09.761Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;p&gt;最近手头的Mix2s接收到MIUI官方开发版的推送，可以升级为Android
        
      
    
    </summary>
    
      <category term="Android" scheme="https://huangyu.github.io/categories/Android/"/>
    
    
      <category term="技巧" scheme="https://huangyu.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Android组件化初探</title>
    <link href="https://huangyu.github.io/archives/22258b7f.html"/>
    <id>https://huangyu.github.io/archives/22258b7f.html</id>
    <published>2018-09-06T11:48:36.000Z</published>
    <updated>2018-09-10T07:42:49.342Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;p&gt;组件化的优势：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;代码架构更加清晰，降低项目的维护难度；&lt;/li&gt;&lt;li&gt;组件模式下可以加快编译速度，提高开发效率；&lt;/li&gt;&lt;li&gt;项目比较大的情况下，多团队独立开发不同模块，互不影响；&lt;/li&gt;&lt;li&gt;利于向插件化变更。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="https://huangyu.github.io/categories/Android/"/>
    
    
      <category term="组件化" scheme="https://huangyu.github.io/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>动态代理和注解处理接口Token问题</title>
    <link href="https://huangyu.github.io/archives/cdd0265b.html"/>
    <id>https://huangyu.github.io/archives/cdd0265b.html</id>
    <published>2018-08-28T13:01:20.000Z</published>
    <updated>2018-09-10T03:14:31.478Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;目前在做SDK时，网络层使用的框架是OkHttp + Retrofit，需要对外提供API方式的网络接口调用。&lt;/p&gt;&lt;p&gt;一般来说，后台都会有接口校验设计，需要在请求头包含部分加密参数进行验证。&lt;/p&gt;&lt;p&gt;我们的项目也是这样处理，外放的接口需要先调用登录接口获取Token，根据Token在请求头进行组合形成鉴权，才能成功通过后台的校验进行使用。&lt;/p&gt;&lt;p&gt;这时候想，如果每个接口都需要提前先获取Token，工作量非常大，于是想到了类似Java的AOP的面向切面处理方式，使用动态代理灵活在接口方法前插入获取Token逻辑。&lt;/p&gt;&lt;p&gt;而部分接口例如，获取验证码、登录相关的，并不需要Token，因此再自定义一个注解用于区别。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://huangyu.github.io/categories/Android/"/>
    
    
      <category term="动态代理" scheme="https://huangyu.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="注解" scheme="https://huangyu.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>SlidingCheckLayout滑动选择布局实现</title>
    <link href="https://huangyu.github.io/archives/2720d64c.html"/>
    <id>https://huangyu.github.io/archives/2720d64c.html</id>
    <published>2018-08-24T07:52:00.000Z</published>
    <updated>2018-09-06T07:48:06.004Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;项目需求，要求在选择本地图片时，可对图片进行滑动选择。类似小米图库或者图库，现在很多手机系统内置图库都自带了这个功能。最后经过调研，使用自定义View解决。SlidingCheckLayout滑动选择布局，用于嵌套RecyclerView实现滑动选择功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://huangyu.github.io/categories/Android/"/>
    
    
      <category term="自定义view" scheme="https://huangyu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法汇总</title>
    <link href="https://huangyu.github.io/archives/3c50d03d.html"/>
    <id>https://huangyu.github.io/archives/3c50d03d.html</id>
    <published>2018-08-24T06:57:03.000Z</published>
    <updated>2018-08-25T08:07:16.684Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Oct 17 2018 15:30:29 GMT+0800 (CST) --&gt;&lt;p&gt;Markdown语法汇总&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://huangyu.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://huangyu.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
